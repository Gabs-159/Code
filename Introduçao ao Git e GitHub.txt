INTRODUÇÃO AO GIT E O GITHUB

O Git é um software, é um sistema de versionamento de código/arquivos, ele ajuda a criar e montar diferentes versões do seu código. O Github seria para guardar seu código modificado feito no Git ou em outro prompt de comando.

 GIT # GITHUB(Complementares mas diferentes)
 
O que são repositórios? São as pastas do Git para poder armazenar os seus projetos

Comandos tecnicos do Git/GitHub(no Windows)
 .Branch = É ma ramificação que você vai fazer no seu projeto.É uma linha cronológica alternativa que você faz sem tem que mexer na sua linha cronológica principal.
         ->(vamos supor que você fez um post(que esta na sua linha princiapal) e ai você quer mexer no código pra acrwscentar um botão para o post, onde vão ficar os               comentários, etc. Fazer ma branch te ajudaria para vc fazer o botão e colocar na principal so depois que eles estiver pronto)
         
 .Commit = É como se fosse salvar a alteração que foi feita. É como se fosse postar as alterações feitas no seu projeto.
          ->(O GitHub que esta com todos os projetos guardados não atualiza automaticamente se o seu código for alterado no seu computador, será necessário                          "postar/salvar" ele de uma forma diferente.E é pra isso que o commit serve.)
          
 .Marge = É fundir 2 ou mais branch ou fundir a branch com a principal.
         ->(Depois que vc fez a branch e quer colocar ela na principal ou colocar uma branch na outra, pode-se usar a marge.)
         
 .Remote = É fazer a ligação do Git da sa maquina com o GitHub que esta seus repositórios com seus projetos.
 
 .Push = Serve para você colocar o commit que feito na sua máquina lá no remote, ou seja, lá no gitHub até porque o commit que você fez na sua máquina ele não vai              automaticamente para o seu repositório.O push faz isso, ele empurra o commit para o repositório.
 
 .Pull = Ele é o contrário do push. ele tira do repositório do GitHub para sua máquina.
         ->(É muito bom para quando você está trabalhando em equipe,e aí você tem que continuar seu o código a partir de uma alteração que uma outra pessoa fez.)

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
Comandos básicos(no Windows)
.Listar = Dir
.Navegar entre pastas ou entrar em pastas = “cd”
.Retroceder = cd ..
.Limpar = “cls” ou "clear"
.Criar pasta = mkdir
.Echo = seria o print no Pycharm e o escreva no Portugol
.Deletar = rmdir(delete a pasta toda)
*usar a tecla “TAB”  te ajuda a escrever nomes de arquivos grandes
*Não se esqueça que as vezes vc vai ter que usar flags para completar seus comandos
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
Comandos na prática(no Windows)
.--version = Mostra a versão do git sendo usado.
..md = É uma extensão markdown.
.git init = Inicializa um repositório git vazio.
.git add 'NomeDoArquivo' = adiciona um arquivo pra ele ser "commitado"
     ->('git add .' = manda todos os arquivos para a área de stage.)
.git status = visualização do arquivos a serem "commitados" ou de alguma modificação feita em algum arquivo
.git remote add origin 'link do repositório'(sem as aspas simples) = faz ligação do repositório e a máquina
.git push -u origin main = empurra arquivos da máquina para o repositório
       ->(Lembrando que 'origin' é o apelido dado ao repositório e que o '-u' é usado somente na 1º vez do remote,ou seja, caso esteja usando o remote pela 2º vez ou           mais nao precisa mais colocar '-u')
.git commit -m "nome da ação do commit"(com aspas duplas mesmo) = "commita" qualquer que seja a modificação feita.
.git checkout -b "nome do branch" = cria o branch 
.git checkout main = sai de uma branch para outra.
      ->(Vale lembrar que a 'main' é uma branch também so qu eela é principal e que no comando no lugar de 'main' vc colocaria o nome da branch para qual vc quer ir).
.git merge 'nome da branch criada'(sem as aspas simples) = para fazer um merge(Colocar as branch na principal ou colocar uma branch na outra mesmo)
.git push origin main = fixa depois de ter feito a merge
.git clone 'link.git'(sem aspas simples) = coloca um repositório no outro.
.git pull 'depois vc da o enter' = passa as modificações feito no github para sua máquina.

*obs.: 'Master' pode ser mudado para 'main' e continua sendo a principal 
       -> Caso esteja na 'master' e queira passar para main = git branch -M "main"(com aspas duplas mesmo)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
***Lá no GitHub 
Se vc vai no repositório de uma pessoa e vc gosta dele vc pode dar um FORK e pega esse repositorio pra vc :)
Se vc vai no repositório de uma pessoa e pega ele pra vc e faz alguma alteração tem como vc mandar para a pessoa pra ver o que ela acha e se ela aceita a modificação que vc fez. É so da um Pull Request(ta tudo la no GitHub).***
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Como o Git funciona por debaixo dos panos
. Sha1 = É uma ferramenta de algoritmo de encriptação.A  encriptação gera um conjunto de 40 caracteres identificado de 40 dígitos.

(*Objetos internos do Git)

.Blob = É um objeto que armazena os dados de um tal comando no Git,ou seja, o tamanho, o que ele é, etc armazenando também um SHA1 do comando.

.Tree = Ela (as árvores) armazena os blob podendo direcionar para outro blob ou tree

 .Commit = É um lugar onde as tree ficam guardadas e como sabemos as tree  armazena os blogs que tem SHA1 do arquivo,ou seja, uma caixa dentro de outra caixa de outra caixa.

*O Git é um sistema distribuído e seguro

